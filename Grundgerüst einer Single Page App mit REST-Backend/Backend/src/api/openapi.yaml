openapi: 3.0.0
info:
  title: TravelblogApp
  description: "Die Travelblog-App nutzt einen simplen REST-Webservices zur Kommunikation\
    \ mit dem Backend. Dieser ermöglicht die üblichen CRUD-Operationen zur Suche,\
    \ Anzeige, Bearbeitung und Löschung von Reisen, Wünschen und abgeschlossenen Reisen \
    \ wobei jede Reise, jede Wunschreise und jede abgeschlossene Reise aus Titel, Autor\
    \ Beschreibung, Ort und einer Aufenthaltsdauer besteht."
  contact:
    name: Huema Yilmaz, Elena Vaeth, Ayse Kocak
  license:
    name: CC-BY-4.0
    url: https://creativecommons.org/licenses/by/4.0/deed.de
  version: "1.0"
servers:
- url: http://localhost:3000
tags:
- name: Index
- name: Reise
paths:
  /:
    get:
      tags:
      - Index
      summary: Wurzeladresse des Webservices
      description: Liefert eine HATEOAS-Übersicht aller collections
      operationId: index
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HATEOAS_Collection'
                x-content-type: application/json
  /travel:
    get:
      tags:
      - Reise
      summary: Reise suchen
      description: Suche nach Reisen. Gibt eine Liste aller Reisen passend zu
        den übergebenen Suchkriterien zurück.
      operationId: search-travel
      parameters:
      - name: title
        in: query
        description: Titel
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: author
        in: query
        description: Autor
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: description
        in: query
        description: Beschreibung der Reise
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: place
        in: query
        description: Ort der Reise
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: time
        in: query
        description: Aufenthaltsdauer
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Travel'
                x-content-type: application/json
    post:
      tags:
      - Reise
      summary: Reise anlegen
      description: "Neue Reise anlegen. Speichert die übergebene Reise in der\
        \ Datenbank. Der Wert des Feldes \"_id\" wird dabei ignoriert, da in jedem Fall\
        \ eine neue Reise mit neuer ID angelegt wird."
      operationId: create-travel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Travel'
      responses:
        "201":
          description: Created
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Travel'

  /travel/{id}:
    get:
      tags:
      - Reise
      summary: Reise lesen
      description: Liest eine einzelne Reise vom Server.
      operationId: get-travel
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Travel'
        "404":
          description: Not Found
    put:
      tags:
      - Reise überschreiben
      summary: ""
      description: "Überschreibt eine vorhandene Reise auf dem Server. Bis auf die\
        \ ID können alle Felder geändert werden. Der Versuch, die ID zu ändern, wird\
        \ vom Server stillschweigend ignoriert."
      operationId: update-travel
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Travel'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Travel'
        "404":
          description: Not Found
    patch:
      tags:
      - Einzelne Felder ändern
      summary: Einzelne Reisefelder ändern
      description: "Ändert einzelne Felder einer vorhandenen Reise. Zulässig sind\
        \ alle Felder bis auf die ID, da diese nachträglich nicht mehr verändert werden\
        \ darf."
      operationId: patch-travel
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Travel'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Travel'
        "404":
          description: Not Found
    delete:
      tags:
      - Reise
      summary: Reise löschen
      description: Löscht eine Reise auf dem Server.
      operationId: delete-travel
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
  /wish:
    get:
      tags:
        - Wunsch
      summary: Wunsch suchen
      description: Suche nach Wünschen. Gibt eine Liste aller Wünsche passend zu
        den übergebenen Suchkriterien zurück.
      operationId: search-wish
      parameters:
        - name: title
          in: query
          description: Titel
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: author
          in: query
          description: Autor
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: description
          in: query
          description: Beschreibung der Reise
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: place
          in: query
          description: Ort der Reise
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: time
          in: query
          description: Aufenthaltsdauer
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wish'
                x-content-type: application/json
    post:
      tags:
        - Wunsch
      summary: Wunsch anlegen
      description: "Neuen Wunsch anlegen. Speichert die übergebene Reise in der\
          \ Datenbank. Der Wert des Feldes \"_id\" wird dabei ignoriert, da in jedem Fall\
          \ eine neue Reise mit neuer ID angelegt wird."
      operationId: create-wunsch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Wish'
      responses:
        "201":
          description: Created
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wish'

  /wish/{id}:
      get:
        tags:
          - Wunsch
        summary: Wunsch lesen
        description: Liest einen einzelnen Wunsch vom Server.
        operationId: get-wish
        parameters:
          - name: id
            in: path
            required: true
            style: simple
            explode: false
            schema:
              type: string
        responses:
          "200":
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Wish'
          "404":
            description: Not Found
      put:
        tags:
          - Wunsch überschreiben
        summary: ""
        description: "Überschreibt einen vorhandenen Wunsch auf dem Server. Bis auf die\
          \ ID können alle Felder geändert werden. Der Versuch, die ID zu ändern, wird\
          \ vom Server stillschweigend ignoriert."
        operationId: update-wish
        parameters:
          - name: id
            in: path
            required: true
            style: simple
            explode: false
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wish'
        responses:
          "200":
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Wish'
          "404":
            description: Not Found
      patch:
        tags:
          - Einzelne Wünsche ändern
        summary: Einzelne Wunschfelder ändern
        description: "Ändert einzelne Felder eines vorhandenen Wunsches. Zulässig sind\
          \ alle Felder bis auf die ID, da diese nachträglich nicht mehr verändert werden\
          \ darf."
        operationId: patch-wish
        parameters:
          - name: id
            in: path
            required: true
            style: simple
            explode: false
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wish'
        responses:
          "200":
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Wish'
          "404":
            description: Not Found
      delete:
        tags:
          - Wunsch
        summary: Wunsch löschen
        description: Löscht einen Wunsch auf dem Server.
        operationId: delete-wish
        parameters:
          - name: id
            in: path
            required: true
            style: simple
            explode: false
            schema:
              type: string
        responses:
          "200":
            description: OK
          "404":
            description: Not Found

components:
  schemas:
    HATEOAS_Collection:
      title: HATEOAS-Links einer Collection
      type: object
      properties:
        _name:
          type: string
        query:
          $ref: '#/components/schemas/HATEOAS_Link'
        create:
          $ref: '#/components/schemas/HATEOAS_Link'

    HATEOAS_Resource:
      title: HATEOAS-Links einer Resource
      type: object
      properties:
        read:
          $ref: '#/components/schemas/HATEOAS_Link'
        update:
          $ref: '#/components/schemas/HATEOAS_Link'
        patch:
          $ref: '#/components/schemas/HATEOAS_Link'
        delete:
          $ref: '#/components/schemas/HATEOAS_Link'

    HATEOAS_Link:
      title: HATEOAS-Link
      type: object
      properties:
        url:
          type: string
        method:
          type: string
        query_params:
          type: array
          items:
            type: string
    Travel:
      title: Reise
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/HATEOAS_Resource'
        _id:
          type: string
        title:
          type: string
        author:
          type: string
        description:
          type: string
        place:
          type: string
        time:
          type: string
      example:
        _id: "621ff9a936997df5baba746e"
        title: "Meine Reise"
        author: "Elena"
        description: "..."
        place: "Spanien"
        time: "10 Tage"
    Wish:
      title: Wunsch
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/HATEOAS_Resource'
        _id:
          type: string
        title:
          type: string
        author:
          type: string
        description:
          type: string
        place:
          type: string
        time:
          type: string
      example:
        _id: "621ff9a936997df5baba746e"
        title: "Meine Reise"
        author: "Elena"
        description: "..."
        place: "Spanien"
        time: "10 Tage"
  securitySchemes: {}
